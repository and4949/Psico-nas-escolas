
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Psicologo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Psicologo
 * 
 */
export type PsicologoModel = runtime.Types.Result.DefaultSelection<Prisma.$PsicologoPayload>

export type AggregatePsicologo = {
  _count: PsicologoCountAggregateOutputType | null
  _avg: PsicologoAvgAggregateOutputType | null
  _sum: PsicologoSumAggregateOutputType | null
  _min: PsicologoMinAggregateOutputType | null
  _max: PsicologoMaxAggregateOutputType | null
}

export type PsicologoAvgAggregateOutputType = {
  id: number | null
}

export type PsicologoSumAggregateOutputType = {
  id: number | null
}

export type PsicologoMinAggregateOutputType = {
  id: number | null
  nome: string | null
  genero: string | null
  crp: string | null
  email: string | null
  senha: string | null
}

export type PsicologoMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  genero: string | null
  crp: string | null
  email: string | null
  senha: string | null
}

export type PsicologoCountAggregateOutputType = {
  id: number
  nome: number
  genero: number
  crp: number
  email: number
  senha: number
  _all: number
}


export type PsicologoAvgAggregateInputType = {
  id?: true
}

export type PsicologoSumAggregateInputType = {
  id?: true
}

export type PsicologoMinAggregateInputType = {
  id?: true
  nome?: true
  genero?: true
  crp?: true
  email?: true
  senha?: true
}

export type PsicologoMaxAggregateInputType = {
  id?: true
  nome?: true
  genero?: true
  crp?: true
  email?: true
  senha?: true
}

export type PsicologoCountAggregateInputType = {
  id?: true
  nome?: true
  genero?: true
  crp?: true
  email?: true
  senha?: true
  _all?: true
}

export type PsicologoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Psicologo to aggregate.
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Psicologos to fetch.
   */
  orderBy?: Prisma.PsicologoOrderByWithRelationInput | Prisma.PsicologoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PsicologoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Psicologos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Psicologos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Psicologos
  **/
  _count?: true | PsicologoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PsicologoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PsicologoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PsicologoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PsicologoMaxAggregateInputType
}

export type GetPsicologoAggregateType<T extends PsicologoAggregateArgs> = {
      [P in keyof T & keyof AggregatePsicologo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePsicologo[P]>
    : Prisma.GetScalarType<T[P], AggregatePsicologo[P]>
}




export type PsicologoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PsicologoWhereInput
  orderBy?: Prisma.PsicologoOrderByWithAggregationInput | Prisma.PsicologoOrderByWithAggregationInput[]
  by: Prisma.PsicologoScalarFieldEnum[] | Prisma.PsicologoScalarFieldEnum
  having?: Prisma.PsicologoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PsicologoCountAggregateInputType | true
  _avg?: PsicologoAvgAggregateInputType
  _sum?: PsicologoSumAggregateInputType
  _min?: PsicologoMinAggregateInputType
  _max?: PsicologoMaxAggregateInputType
}

export type PsicologoGroupByOutputType = {
  id: number
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
  _count: PsicologoCountAggregateOutputType | null
  _avg: PsicologoAvgAggregateOutputType | null
  _sum: PsicologoSumAggregateOutputType | null
  _min: PsicologoMinAggregateOutputType | null
  _max: PsicologoMaxAggregateOutputType | null
}

type GetPsicologoGroupByPayload<T extends PsicologoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PsicologoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PsicologoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PsicologoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PsicologoGroupByOutputType[P]>
      }
    >
  >



export type PsicologoWhereInput = {
  AND?: Prisma.PsicologoWhereInput | Prisma.PsicologoWhereInput[]
  OR?: Prisma.PsicologoWhereInput[]
  NOT?: Prisma.PsicologoWhereInput | Prisma.PsicologoWhereInput[]
  id?: Prisma.IntFilter<"Psicologo"> | number
  nome?: Prisma.StringFilter<"Psicologo"> | string
  genero?: Prisma.StringFilter<"Psicologo"> | string
  crp?: Prisma.StringFilter<"Psicologo"> | string
  email?: Prisma.StringFilter<"Psicologo"> | string
  senha?: Prisma.StringFilter<"Psicologo"> | string
  Consulta?: Prisma.ConsultaListRelationFilter
}

export type PsicologoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  genero?: Prisma.SortOrder
  crp?: Prisma.SortOrder
  email?: Prisma.SortOrder
  senha?: Prisma.SortOrder
  Consulta?: Prisma.ConsultaOrderByRelationAggregateInput
}

export type PsicologoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  crp?: string
  email?: string
  AND?: Prisma.PsicologoWhereInput | Prisma.PsicologoWhereInput[]
  OR?: Prisma.PsicologoWhereInput[]
  NOT?: Prisma.PsicologoWhereInput | Prisma.PsicologoWhereInput[]
  nome?: Prisma.StringFilter<"Psicologo"> | string
  genero?: Prisma.StringFilter<"Psicologo"> | string
  senha?: Prisma.StringFilter<"Psicologo"> | string
  Consulta?: Prisma.ConsultaListRelationFilter
}, "id" | "crp" | "email">

export type PsicologoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  genero?: Prisma.SortOrder
  crp?: Prisma.SortOrder
  email?: Prisma.SortOrder
  senha?: Prisma.SortOrder
  _count?: Prisma.PsicologoCountOrderByAggregateInput
  _avg?: Prisma.PsicologoAvgOrderByAggregateInput
  _max?: Prisma.PsicologoMaxOrderByAggregateInput
  _min?: Prisma.PsicologoMinOrderByAggregateInput
  _sum?: Prisma.PsicologoSumOrderByAggregateInput
}

export type PsicologoScalarWhereWithAggregatesInput = {
  AND?: Prisma.PsicologoScalarWhereWithAggregatesInput | Prisma.PsicologoScalarWhereWithAggregatesInput[]
  OR?: Prisma.PsicologoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PsicologoScalarWhereWithAggregatesInput | Prisma.PsicologoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Psicologo"> | number
  nome?: Prisma.StringWithAggregatesFilter<"Psicologo"> | string
  genero?: Prisma.StringWithAggregatesFilter<"Psicologo"> | string
  crp?: Prisma.StringWithAggregatesFilter<"Psicologo"> | string
  email?: Prisma.StringWithAggregatesFilter<"Psicologo"> | string
  senha?: Prisma.StringWithAggregatesFilter<"Psicologo"> | string
}

export type PsicologoCreateInput = {
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
  Consulta?: Prisma.ConsultaCreateNestedManyWithoutPsicologoInput
}

export type PsicologoUncheckedCreateInput = {
  id?: number
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
  Consulta?: Prisma.ConsultaUncheckedCreateNestedManyWithoutPsicologoInput
}

export type PsicologoUpdateInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
  Consulta?: Prisma.ConsultaUpdateManyWithoutPsicologoNestedInput
}

export type PsicologoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
  Consulta?: Prisma.ConsultaUncheckedUpdateManyWithoutPsicologoNestedInput
}

export type PsicologoCreateManyInput = {
  id?: number
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
}

export type PsicologoUpdateManyMutationInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PsicologoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PsicologoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  genero?: Prisma.SortOrder
  crp?: Prisma.SortOrder
  email?: Prisma.SortOrder
  senha?: Prisma.SortOrder
}

export type PsicologoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PsicologoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  genero?: Prisma.SortOrder
  crp?: Prisma.SortOrder
  email?: Prisma.SortOrder
  senha?: Prisma.SortOrder
}

export type PsicologoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  genero?: Prisma.SortOrder
  crp?: Prisma.SortOrder
  email?: Prisma.SortOrder
  senha?: Prisma.SortOrder
}

export type PsicologoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PsicologoScalarRelationFilter = {
  is?: Prisma.PsicologoWhereInput
  isNot?: Prisma.PsicologoWhereInput
}

export type PsicologoCreateNestedOneWithoutConsultaInput = {
  create?: Prisma.XOR<Prisma.PsicologoCreateWithoutConsultaInput, Prisma.PsicologoUncheckedCreateWithoutConsultaInput>
  connectOrCreate?: Prisma.PsicologoCreateOrConnectWithoutConsultaInput
  connect?: Prisma.PsicologoWhereUniqueInput
}

export type PsicologoUpdateOneRequiredWithoutConsultaNestedInput = {
  create?: Prisma.XOR<Prisma.PsicologoCreateWithoutConsultaInput, Prisma.PsicologoUncheckedCreateWithoutConsultaInput>
  connectOrCreate?: Prisma.PsicologoCreateOrConnectWithoutConsultaInput
  upsert?: Prisma.PsicologoUpsertWithoutConsultaInput
  connect?: Prisma.PsicologoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PsicologoUpdateToOneWithWhereWithoutConsultaInput, Prisma.PsicologoUpdateWithoutConsultaInput>, Prisma.PsicologoUncheckedUpdateWithoutConsultaInput>
}

export type PsicologoCreateWithoutConsultaInput = {
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
}

export type PsicologoUncheckedCreateWithoutConsultaInput = {
  id?: number
  nome: string
  genero: string
  crp: string
  email: string
  senha: string
}

export type PsicologoCreateOrConnectWithoutConsultaInput = {
  where: Prisma.PsicologoWhereUniqueInput
  create: Prisma.XOR<Prisma.PsicologoCreateWithoutConsultaInput, Prisma.PsicologoUncheckedCreateWithoutConsultaInput>
}

export type PsicologoUpsertWithoutConsultaInput = {
  update: Prisma.XOR<Prisma.PsicologoUpdateWithoutConsultaInput, Prisma.PsicologoUncheckedUpdateWithoutConsultaInput>
  create: Prisma.XOR<Prisma.PsicologoCreateWithoutConsultaInput, Prisma.PsicologoUncheckedCreateWithoutConsultaInput>
  where?: Prisma.PsicologoWhereInput
}

export type PsicologoUpdateToOneWithWhereWithoutConsultaInput = {
  where?: Prisma.PsicologoWhereInput
  data: Prisma.XOR<Prisma.PsicologoUpdateWithoutConsultaInput, Prisma.PsicologoUncheckedUpdateWithoutConsultaInput>
}

export type PsicologoUpdateWithoutConsultaInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PsicologoUncheckedUpdateWithoutConsultaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  genero?: Prisma.StringFieldUpdateOperationsInput | string
  crp?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  senha?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PsicologoCountOutputType
 */

export type PsicologoCountOutputType = {
  Consulta: number
}

export type PsicologoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Consulta?: boolean | PsicologoCountOutputTypeCountConsultaArgs
}

/**
 * PsicologoCountOutputType without action
 */
export type PsicologoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PsicologoCountOutputType
   */
  select?: Prisma.PsicologoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PsicologoCountOutputType without action
 */
export type PsicologoCountOutputTypeCountConsultaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConsultaWhereInput
}


export type PsicologoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  genero?: boolean
  crp?: boolean
  email?: boolean
  senha?: boolean
  Consulta?: boolean | Prisma.Psicologo$ConsultaArgs<ExtArgs>
  _count?: boolean | Prisma.PsicologoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["psicologo"]>

export type PsicologoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  genero?: boolean
  crp?: boolean
  email?: boolean
  senha?: boolean
}, ExtArgs["result"]["psicologo"]>

export type PsicologoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  genero?: boolean
  crp?: boolean
  email?: boolean
  senha?: boolean
}, ExtArgs["result"]["psicologo"]>

export type PsicologoSelectScalar = {
  id?: boolean
  nome?: boolean
  genero?: boolean
  crp?: boolean
  email?: boolean
  senha?: boolean
}

export type PsicologoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "genero" | "crp" | "email" | "senha", ExtArgs["result"]["psicologo"]>
export type PsicologoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Consulta?: boolean | Prisma.Psicologo$ConsultaArgs<ExtArgs>
  _count?: boolean | Prisma.PsicologoCountOutputTypeDefaultArgs<ExtArgs>
}
export type PsicologoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PsicologoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PsicologoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Psicologo"
  objects: {
    Consulta: Prisma.$ConsultaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string
    genero: string
    crp: string
    email: string
    senha: string
  }, ExtArgs["result"]["psicologo"]>
  composites: {}
}

export type PsicologoGetPayload<S extends boolean | null | undefined | PsicologoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PsicologoPayload, S>

export type PsicologoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PsicologoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PsicologoCountAggregateInputType | true
  }

export interface PsicologoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Psicologo'], meta: { name: 'Psicologo' } }
  /**
   * Find zero or one Psicologo that matches the filter.
   * @param {PsicologoFindUniqueArgs} args - Arguments to find a Psicologo
   * @example
   * // Get one Psicologo
   * const psicologo = await prisma.psicologo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PsicologoFindUniqueArgs>(args: Prisma.SelectSubset<T, PsicologoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Psicologo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PsicologoFindUniqueOrThrowArgs} args - Arguments to find a Psicologo
   * @example
   * // Get one Psicologo
   * const psicologo = await prisma.psicologo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PsicologoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PsicologoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Psicologo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoFindFirstArgs} args - Arguments to find a Psicologo
   * @example
   * // Get one Psicologo
   * const psicologo = await prisma.psicologo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PsicologoFindFirstArgs>(args?: Prisma.SelectSubset<T, PsicologoFindFirstArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Psicologo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoFindFirstOrThrowArgs} args - Arguments to find a Psicologo
   * @example
   * // Get one Psicologo
   * const psicologo = await prisma.psicologo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PsicologoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PsicologoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Psicologos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Psicologos
   * const psicologos = await prisma.psicologo.findMany()
   * 
   * // Get first 10 Psicologos
   * const psicologos = await prisma.psicologo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const psicologoWithIdOnly = await prisma.psicologo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PsicologoFindManyArgs>(args?: Prisma.SelectSubset<T, PsicologoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Psicologo.
   * @param {PsicologoCreateArgs} args - Arguments to create a Psicologo.
   * @example
   * // Create one Psicologo
   * const Psicologo = await prisma.psicologo.create({
   *   data: {
   *     // ... data to create a Psicologo
   *   }
   * })
   * 
   */
  create<T extends PsicologoCreateArgs>(args: Prisma.SelectSubset<T, PsicologoCreateArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Psicologos.
   * @param {PsicologoCreateManyArgs} args - Arguments to create many Psicologos.
   * @example
   * // Create many Psicologos
   * const psicologo = await prisma.psicologo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PsicologoCreateManyArgs>(args?: Prisma.SelectSubset<T, PsicologoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Psicologos and returns the data saved in the database.
   * @param {PsicologoCreateManyAndReturnArgs} args - Arguments to create many Psicologos.
   * @example
   * // Create many Psicologos
   * const psicologo = await prisma.psicologo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Psicologos and only return the `id`
   * const psicologoWithIdOnly = await prisma.psicologo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PsicologoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PsicologoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Psicologo.
   * @param {PsicologoDeleteArgs} args - Arguments to delete one Psicologo.
   * @example
   * // Delete one Psicologo
   * const Psicologo = await prisma.psicologo.delete({
   *   where: {
   *     // ... filter to delete one Psicologo
   *   }
   * })
   * 
   */
  delete<T extends PsicologoDeleteArgs>(args: Prisma.SelectSubset<T, PsicologoDeleteArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Psicologo.
   * @param {PsicologoUpdateArgs} args - Arguments to update one Psicologo.
   * @example
   * // Update one Psicologo
   * const psicologo = await prisma.psicologo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PsicologoUpdateArgs>(args: Prisma.SelectSubset<T, PsicologoUpdateArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Psicologos.
   * @param {PsicologoDeleteManyArgs} args - Arguments to filter Psicologos to delete.
   * @example
   * // Delete a few Psicologos
   * const { count } = await prisma.psicologo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PsicologoDeleteManyArgs>(args?: Prisma.SelectSubset<T, PsicologoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Psicologos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Psicologos
   * const psicologo = await prisma.psicologo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PsicologoUpdateManyArgs>(args: Prisma.SelectSubset<T, PsicologoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Psicologos and returns the data updated in the database.
   * @param {PsicologoUpdateManyAndReturnArgs} args - Arguments to update many Psicologos.
   * @example
   * // Update many Psicologos
   * const psicologo = await prisma.psicologo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Psicologos and only return the `id`
   * const psicologoWithIdOnly = await prisma.psicologo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PsicologoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PsicologoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Psicologo.
   * @param {PsicologoUpsertArgs} args - Arguments to update or create a Psicologo.
   * @example
   * // Update or create a Psicologo
   * const psicologo = await prisma.psicologo.upsert({
   *   create: {
   *     // ... data to create a Psicologo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Psicologo we want to update
   *   }
   * })
   */
  upsert<T extends PsicologoUpsertArgs>(args: Prisma.SelectSubset<T, PsicologoUpsertArgs<ExtArgs>>): Prisma.Prisma__PsicologoClient<runtime.Types.Result.GetResult<Prisma.$PsicologoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Psicologos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoCountArgs} args - Arguments to filter Psicologos to count.
   * @example
   * // Count the number of Psicologos
   * const count = await prisma.psicologo.count({
   *   where: {
   *     // ... the filter for the Psicologos we want to count
   *   }
   * })
  **/
  count<T extends PsicologoCountArgs>(
    args?: Prisma.Subset<T, PsicologoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PsicologoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Psicologo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PsicologoAggregateArgs>(args: Prisma.Subset<T, PsicologoAggregateArgs>): Prisma.PrismaPromise<GetPsicologoAggregateType<T>>

  /**
   * Group by Psicologo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PsicologoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PsicologoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PsicologoGroupByArgs['orderBy'] }
      : { orderBy?: PsicologoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PsicologoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPsicologoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Psicologo model
 */
readonly fields: PsicologoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Psicologo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PsicologoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Consulta<T extends Prisma.Psicologo$ConsultaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Psicologo$ConsultaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConsultaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Psicologo model
 */
export interface PsicologoFieldRefs {
  readonly id: Prisma.FieldRef<"Psicologo", 'Int'>
  readonly nome: Prisma.FieldRef<"Psicologo", 'String'>
  readonly genero: Prisma.FieldRef<"Psicologo", 'String'>
  readonly crp: Prisma.FieldRef<"Psicologo", 'String'>
  readonly email: Prisma.FieldRef<"Psicologo", 'String'>
  readonly senha: Prisma.FieldRef<"Psicologo", 'String'>
}
    

// Custom InputTypes
/**
 * Psicologo findUnique
 */
export type PsicologoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter, which Psicologo to fetch.
   */
  where: Prisma.PsicologoWhereUniqueInput
}

/**
 * Psicologo findUniqueOrThrow
 */
export type PsicologoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter, which Psicologo to fetch.
   */
  where: Prisma.PsicologoWhereUniqueInput
}

/**
 * Psicologo findFirst
 */
export type PsicologoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter, which Psicologo to fetch.
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Psicologos to fetch.
   */
  orderBy?: Prisma.PsicologoOrderByWithRelationInput | Prisma.PsicologoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Psicologos.
   */
  cursor?: Prisma.PsicologoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Psicologos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Psicologos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Psicologos.
   */
  distinct?: Prisma.PsicologoScalarFieldEnum | Prisma.PsicologoScalarFieldEnum[]
}

/**
 * Psicologo findFirstOrThrow
 */
export type PsicologoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter, which Psicologo to fetch.
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Psicologos to fetch.
   */
  orderBy?: Prisma.PsicologoOrderByWithRelationInput | Prisma.PsicologoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Psicologos.
   */
  cursor?: Prisma.PsicologoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Psicologos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Psicologos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Psicologos.
   */
  distinct?: Prisma.PsicologoScalarFieldEnum | Prisma.PsicologoScalarFieldEnum[]
}

/**
 * Psicologo findMany
 */
export type PsicologoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter, which Psicologos to fetch.
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Psicologos to fetch.
   */
  orderBy?: Prisma.PsicologoOrderByWithRelationInput | Prisma.PsicologoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Psicologos.
   */
  cursor?: Prisma.PsicologoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Psicologos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Psicologos.
   */
  skip?: number
  distinct?: Prisma.PsicologoScalarFieldEnum | Prisma.PsicologoScalarFieldEnum[]
}

/**
 * Psicologo create
 */
export type PsicologoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * The data needed to create a Psicologo.
   */
  data: Prisma.XOR<Prisma.PsicologoCreateInput, Prisma.PsicologoUncheckedCreateInput>
}

/**
 * Psicologo createMany
 */
export type PsicologoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Psicologos.
   */
  data: Prisma.PsicologoCreateManyInput | Prisma.PsicologoCreateManyInput[]
}

/**
 * Psicologo createManyAndReturn
 */
export type PsicologoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * The data used to create many Psicologos.
   */
  data: Prisma.PsicologoCreateManyInput | Prisma.PsicologoCreateManyInput[]
}

/**
 * Psicologo update
 */
export type PsicologoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * The data needed to update a Psicologo.
   */
  data: Prisma.XOR<Prisma.PsicologoUpdateInput, Prisma.PsicologoUncheckedUpdateInput>
  /**
   * Choose, which Psicologo to update.
   */
  where: Prisma.PsicologoWhereUniqueInput
}

/**
 * Psicologo updateMany
 */
export type PsicologoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Psicologos.
   */
  data: Prisma.XOR<Prisma.PsicologoUpdateManyMutationInput, Prisma.PsicologoUncheckedUpdateManyInput>
  /**
   * Filter which Psicologos to update
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * Limit how many Psicologos to update.
   */
  limit?: number
}

/**
 * Psicologo updateManyAndReturn
 */
export type PsicologoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * The data used to update Psicologos.
   */
  data: Prisma.XOR<Prisma.PsicologoUpdateManyMutationInput, Prisma.PsicologoUncheckedUpdateManyInput>
  /**
   * Filter which Psicologos to update
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * Limit how many Psicologos to update.
   */
  limit?: number
}

/**
 * Psicologo upsert
 */
export type PsicologoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * The filter to search for the Psicologo to update in case it exists.
   */
  where: Prisma.PsicologoWhereUniqueInput
  /**
   * In case the Psicologo found by the `where` argument doesn't exist, create a new Psicologo with this data.
   */
  create: Prisma.XOR<Prisma.PsicologoCreateInput, Prisma.PsicologoUncheckedCreateInput>
  /**
   * In case the Psicologo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PsicologoUpdateInput, Prisma.PsicologoUncheckedUpdateInput>
}

/**
 * Psicologo delete
 */
export type PsicologoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
  /**
   * Filter which Psicologo to delete.
   */
  where: Prisma.PsicologoWhereUniqueInput
}

/**
 * Psicologo deleteMany
 */
export type PsicologoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Psicologos to delete
   */
  where?: Prisma.PsicologoWhereInput
  /**
   * Limit how many Psicologos to delete.
   */
  limit?: number
}

/**
 * Psicologo.Consulta
 */
export type Psicologo$ConsultaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consulta
   */
  select?: Prisma.ConsultaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consulta
   */
  omit?: Prisma.ConsultaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsultaInclude<ExtArgs> | null
  where?: Prisma.ConsultaWhereInput
  orderBy?: Prisma.ConsultaOrderByWithRelationInput | Prisma.ConsultaOrderByWithRelationInput[]
  cursor?: Prisma.ConsultaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ConsultaScalarFieldEnum | Prisma.ConsultaScalarFieldEnum[]
}

/**
 * Psicologo without action
 */
export type PsicologoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Psicologo
   */
  select?: Prisma.PsicologoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Psicologo
   */
  omit?: Prisma.PsicologoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PsicologoInclude<ExtArgs> | null
}
